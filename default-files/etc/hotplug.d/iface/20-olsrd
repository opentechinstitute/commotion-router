include /lib/network

#DEBUG="echo"


#===  FUNCTION  ================================================================
#          NAME:  remove_olsrd_plugin
#   DESCRIPTION:  Remove the specified OLSRd plugin
#    PARAMETERS:  name of the plugin to remove
#       RETURNS:  0 on success, 1 on failure
#===============================================================================
remove_olsrd_plugin() {
  local pname="$1"
  local r=1

  config_cb() {
    local type="$1"
    local name="$2"

    case $type in
      LoadPlugin)
        case "$(uci_get olsrd "$name" library "")" in
          olsrd_"$pname"\.so\.*)
            uci_remove olsrd "$name" && r=0
            ;;
        esac
      ;;
    esac
  }
  config_load olsrd

  return $r
}

#===  FUNCTION  ================================================================
#          NAME:  add_olsrd_plugin
#   DESCRIPTION:  Add the specified OLSRd plugin to config
#    PARAMETERS:  name of the plugin to add
#       RETURNS:  0 on success, 1 on plugin nonexistance, 2 on failure
#===============================================================================
add_olsrd_plugin() {
  local pname="$1"
  local LIB=/usr/lib
  local set=0

  ls $LIB/olsrd_"$pname"\.so\.* &>/dev/null

  case $? in
    1)
      return 1
    ;;
    0)
      cd $LIB
      local plugin="$(ls olsrd_"$pname"\.so\.* 2>/dev/null)"
      config_cb() {
        local type="$1"
        local name="$2"
    
        case $type in
          LoadPlugin)
            case "$(uci_get olsrd "$name" library)" in
              "$plugin")
                  echo "$name"
                  set=1
                  return 0
                ;;
            esac
          ;;
          "")
            [ $set = 0 ] && {
              $DEBUG uci_add olsrd LoadPlugin "$pname"
              $DEBUG uci_set olsrd @LoadPlugin[-1] library "$plugin"
              echo "$pname" && return 0
            }
          ;;
        esac
      }
      config_load olsrd
    ;;
  esac

  return 2
}

#===  FUNCTION  ================================================================
#          NAME:  unset_olsrd_if
#   DESCRIPTION:  Unsets the interface stanza for the olsrd config
#    PARAMETERS:  config name of the interface to remove
#       RETURNS:  0 on success
#===============================================================================

unset_olsrd_if() {
  local config=$1
  
  uci_remove olsrd "$config"
        
  return 0
}

#===  FUNCTION  ================================================================
#          NAME:  set_olsrd_if
#   DESCRIPTION:  Sets the interface stanza for the olsrd config
#    PARAMETERS:  config name of the interface to add
#       RETURNS:  0 on success
#===============================================================================

set_olsrd_if() {
  local config="$1"
  local mode="ether"
  $DEBUG uci_add olsrd Interface "$config"
  $DEBUG uci_set olsrd "$config" interface "$config"

  config_cb() {
    local type="$1"
    local name="$2"

    case $type in
      wifi-iface)
        [ "$(uci_get wireless "$name" network)" = "$config" ] && mode="mesh"
        ;;
    esac
  }
  config_load wireless
  $DEBUG uci_set olsrd "$config" Mode "$mode"
  $DEBUG uci_set olsrd "$config" Ip4Broadcast "255.255.255.255"

  return 0
}

#===  FUNCTION  ================================================================
#          NAME:  unset_olsrd_p2pif
#   DESCRIPTION:  Unsets the p2p plugin stanza for the olsrd config
#    PARAMETERS:  config name of the interface to remove
#       RETURNS:  0 on success
#===============================================================================

unset_olsrd_p2pif() {
  local config="$1"
  
  config_cb() {
    local type="$1"
    local name="$2"

    case $type in
      LoadPlugin)
        case "$(uci_get olsrd "$name" library)" in
          olsrd_p2pd.so.*)
            local oldconfigs="$(uci_get olsrd "$name" NonOlsrIf "")"
            local newconfigs=
            for dev in $(sort_list "$oldconfigs" "$config"); do
              list_remove newconfigs "$dev"
            done
            uci_set olsrd "$name" NonOlsrIf "$newconfigs"
            ;;
        esac
      ;;
    esac
  }
  config_load olsrd

  return 0
}

#===  FUNCTION  ================================================================
#          NAME:  set_olsrd_p2pif
#   DESCRIPTION:  Sets the p2p plugin stanza for the olsrd config
#    PARAMETERS:  config name of the interface to add
#       RETURNS:  0 on success
#===============================================================================

set_olsrd_p2pif() {
  local config="$1"
  
  local name="$(add_olsrd_plugin "p2pd")"
  local oldconfigs="$(uci_get olsrd "$name" NonOlsrIf "")"
  local newconfigs=
  for dev in $(sort_list "$oldconfigs" "$config"); do
    append newconfigs "$dev"
  done
  uci_set olsrd "$name" NonOlsrIf "$newconfigs"

  return 0
}

#===  FUNCTION  ================================================================
#          NAME:  unset_olsrd_dnssrv
#   DESCRIPTION:  Unsets the dns-server plugin option for the olsrd config
#    PARAMETERS:  IP address of the interface to remove
#       RETURNS:  0 on success
#===============================================================================

unset_olsrd_dnssrv() {
  local ip4addr="$1"
  
  config_cb() {
    local type="$1"
    local name="$2"

    case $type in
      LoadPlugin)
        case "$(uci_get olsrd "$name" dns_server "")" in
          "$ip4addr")
            uci_remove olsrd "$name" dns_server
            ;;
        esac
      ;;
    esac
  }
  config_load olsrd

  return 0
}

#===  FUNCTION  ================================================================
#          NAME:  set_olsrd_dnssrv
#   DESCRIPTION:  Sets the dns-server plugin option for the olsrd config
#    PARAMETERS:  IP address of the interface to add
#       RETURNS:  0 on success
#===============================================================================

set_olsrd_dnssrv() {
  local ipv4addr="$1"
  
  local name="$(add_olsrd_plugin "nameservice")"
  $DEBUG uci_set olsrd "$name" dns_server "$ipv4addr"
  return 0
}

#===  FUNCTION  ================================================================
#          NAME:  unset_olsrd_hna4
#   DESCRIPTION:  Unset HNA4 stanza in olsrd config
#    PARAMETERS:  1; config name of interface to unset
#       RETURNS:  0 on success
#===============================================================================

unset_olsrd_hna4() {
  local config=$1
  
  uci_remove olsrd "$config"
        
  return 0
}

#===  FUNCTION  ================================================================
#          NAME:  set_olsrd_hna4
#   DESCRIPTION:  Set HNA4 stanza in olsrd config
#    PARAMETERS:  3; IPv4 address, netmask to set, and config
#       RETURNS:  0 on success
#===============================================================================

set_olsrd_hna4() {
  local ipv4addr=$1
  local netmask=$2
  local config=$3

  uci_add olsrd Hna4 "$config" 
  uci_set olsrd "$config" netaddr "$ipv4addr"
  uci_set olsrd "$config" netmask "$netmask"

  return 0
} 

#===  FUNCTION  ================================================================
#          NAME:  set_olsrd_secure
#   DESCRIPTION:  Set olsrd_secure stanza in olsrd config
#    PARAMETERS:  None
#       RETURNS:  0 on success
#===============================================================================

set_olsrd_secure() {

  local name="$(add_olsrd_plugin "secure")"
  $DEBUG uci_set olsrd "$name" Keyfile "/etc/olsrd.d/olsrd_secure_key"

  return 0
} 

[ -f "/etc/config/olsrd" ] && [ "$(uci_get network "$INTERFACE" routing)" = "olsrd" ] && {
case $PROTO in
  meshif)
    [ "$RESET" = 1 ] && {
      case $ACTION in
        postup)
          $DEBUG set_olsrd_if $INTERFACE
          #$DEBUG set_olsrd_dnssrv "$(uci_get_state network "$INTERFACE" ipaddr)"
          case "$(uci_get network "$INTERFACE" secure 0)" in
            0)
              $DEBUG remove_olsrd_plugin "secure"
              ;;
            1)
              $DEBUG set_olsrd_secure
              ;;
          esac
        ;;
        predown)
          $DEBUG unset_olsrd_if $INTERFACE
          ;;
      esac

      uci_commit olsrd
    }
   ;;
  apif)
    [ "$RESET" = 1 ] && {
      case $ACTION in
        postup)
          eval `ipcalc.sh "$(uci_get_state network "$INTERFACE" ipaddr)" "$(uci_get_state network "$INTERFACE" netmask)"`
          $DEBUG set_olsrd_hna4  $NETWORK $NETMASK $INTERFACE
          $DEBUG set_olsrd_p2pif $INTERFACE
        ;;
      esac

      uci_commit olsrd
    }
  ;;
  plugif)
    case $ACTION in
      postup)
        case "$(uci_get_state network "$INTERFACE" plug)" in
          0)
            eval `ipcalc.sh "$(uci_get_state network "$INTERFACE" ipaddr)" "$(uci_get_state network "$INTERFACE" netmask)"`
            $DEBUG set_olsrd_hna4  $NETWORK $NETMASK $INTERFACE
            $DEBUG set_olsrd_p2pif $INTERFACE
            ;;
          1)
            [ "$(uci_get network "$INTERFACE" meshable 0)" = 1 ] && $DEBUG unset_olsrd_hna4 $INTERFACE && $DEBUG set_olsrd_if $INTERFACE
            ;;
        esac
      ;;
      predown)
        $DEBUG unset_olsrd_if $INTERFACE
        $DEBUG unset_olsrd_hna4 $INTERFACE
        $DEBUG unset_olsrd_p2pif $INTERFACE
      ;; 
    esac

    uci_commit olsrd
  ;;
esac
}
